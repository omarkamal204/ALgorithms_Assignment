#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

class Edge {
public:
    int src, dest, weight;
};

bool compareEdges(Edge e1, Edge e2) {
    return e1.weight < e2.weight;
}

class DisjointSets {
    vector<int> parent, rank;
    int n;
public:
    DisjointSets(int n) : parent(n), rank(n, 0) {
        for (int i = 0; i < n; i++)
            parent[i] = i;
    }

    int find(int u) {
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }

    void unionSet(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX != rootY) {
            if (rank[rootX] > rank[rootY])
                parent[rootY] = rootX;
            else if (rank[rootX] < rank[rootY])
                parent[rootX] = rootY;
            else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
};

void KruskalMST(vector<Edge>& edges, int V) {
    sort(edges.begin(), edges.end(), compareEdges);
    DisjointSets ds(V);
    vector<Edge> result;
    
    for (Edge e : edges) {
        int u = ds.find(e.src);
        int v = ds.find(e.dest);
        if (u != v) {
            result.push_back(e);
            ds.unionSet(u, v);
        }
    }

    cout << "Edges in MST:\n";
    for (Edge e : result)
        cout << e.src << " -- " << e.dest << " == " << e.weight << endl;
}

int main() {
    vector<Edge> edges = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };
    int V = 4; // Number of vertices
    KruskalMST(edges, V);
    return 0;
}
